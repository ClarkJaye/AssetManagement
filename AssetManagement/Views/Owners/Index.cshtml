@using AssetManagement.Models.View_Model;

@model OwnerViewModel

@{
    ViewData["Title"] = "Owners";
}

<div class="m-4 px-1">
    <h4>Owners</h4>
    @if (TempData["Welcome"] != null)
    {
        <p>@TempData["Welcome"]</p>
    }
</div>


@if (@TempData["AlertMessage"] != null)
{
    <div id="alertMessage" class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["AlertMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="m-4 px-1 form-cont-owner">

    <form id="ownerForm" asp-action="CreateUpdate" method="post" class="d-none">
        <div class="row g-3">
            <input type="hidden" name="idCheck" value='@ViewData["ad"]' />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="col-md-2">
                <label asp-for="Owner.OwnerCode" class="form-label"></label>
                <input asp-for="Owner.OwnerCode" class="form-control" placeholder="Enter owner code" />
                <span asp-validation-for="Owner.OwnerCode" class="text-danger"></span>
            </div>
            <div class="col-md-2">
                <label asp-for="Owner.OwnerFullName" class="form-label"></label>
                <input asp-for="Owner.OwnerFullName" class="form-control" placeholder="Enter fullname" />
                <span asp-validation-for="Owner.OwnerFullName" class="text-danger"></span>
            </div>
            <div class="col-md-2">
                <label asp-for="Owner.OwnerDept" class="form-label"></label>
                <select asp-for="Owner.OwnerDept" class="form-select" asp-items="ViewBag.OwnerDept">
                    <option selected disabled>select department</option>
                </select>
            </div>
            <div class="col-md-2">
                <label asp-for="Owner.OwnerLocation" class="form-label"></label>
                <select asp-for="Owner.OwnerLocation" class="form-select" asp-items="ViewBag.OwnerLocation">
                    <option selected disabled>select location</option>
                </select>
            </div>
            <div class="col-md-2">
                <label asp-for="Owner.OwnerOffice" class="form-label"></label>
                <select asp-for="Owner.OwnerOffice" class="form-select" asp-items="ViewBag.OwnerOffice">
                    <option selected disabled>select office</option>
                </select>
            </div>
            <div class="col-md-2" hidden>
                <label asp-for="Owner.OwnerStatus" class="form-label"></label>
                <select asp-for="Owner.OwnerStatus" class="form-control" asp-items="ViewBag.OwnerStatus"></select>
            </div>
            <div class="col-md-2" hidden>
                <label asp-for="Owner.OwnerCreated" class="form-label"></label>
                <select asp-for="Owner.OwnerCreated" class="form-control" asp-items="ViewBag.OwnerCreated">              
                </select>
            </div>
            <div class="col-md-2" hidden>
                <label asp-for="Owner.DateCreated" class="form-label"></label>
                <input asp-for="Owner.DateCreated" class="form-control" />
                <span asp-validation-for="Owner.DateCreated" class="text-danger"></span>
            </div>

            <div class="col-md-2 d-flex align-items-end gap-2">
                <button type="button" id="saveButton" class="btn btn-primary px-4">Save</button>
                <button type="button" id="cancelButton" class="btn btn-danger px-4">Cancel</button>
            </div>

        </div>
    </form>
</div>

<hr />

<div class="m-4">
    <!-- Action Buttons -->
    <div class="d-flex align-items-center justify-content-between gap-2 mb-2 mx-2">
        <div>
            <button type="button" class="multi-delete-button btn btn-sm btn-danger disabled" data-bs-toggle="modal" data-bs-target="#deleteModal">
                <span class="fas fa-ban"></span> Temporary Delete
            </button>
        </div>
        <div class="d-flex align-items-center gap-2">
            <button id="CreateButton" class="btn btn-theme">
                <i class="fas fa-pencil-alt"></i>
                <span>Create New</span>
            </button>
            <a class="btn btn-outline-secondary" asp-controller="Owners" asp-action="Inactive">
                <span class="fas fa-trash-alt"></span> Show Temporary Deleted
            </a>
        </div>
    </div>
   
    <form method="post" action="@Url.Action("DeleteAsEdit", "Owners")">
        <!-- Modal -->
        <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to Continue this Action for the selected item(s)?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Proceed</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive scrollable-container table-container">
            <table id="ownersTable" class="table table-striped">
                <thead>
                    <tr>
                        <th class="text-center">
                            <input type="checkbox" id="select-all-checkbox" class="custom-checkbox" />
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.OwnerCode)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.OwnerFullName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.OwnerLocation)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.OwnerOffice)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.DateCreated)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.DateUpdated)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.Createdby)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.Updatedby)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.Status)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Owner.Department)
                        </th>
                        <th class="text-center">ACTION</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OwnerList)
                    {
                        <tr>
                            <td class="text-center">
                                <input type="checkbox" name="selectedIds" id="select-all-checkbox" class="custom-checkbox" value="@item.OwnerCode" />
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.OwnerCode)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.OwnerFullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Location.Description)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Store.StoreName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DateCreated)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DateUpdated)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Createdby.UserFullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Updatedby.UserFullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Status.status_name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Department.Dept_name)
                            </td>

                             <td class="text-center">
                                <div class="d-flex justify-content-center">
                                    <a class="btn btn-sm btn-outline-primary editOwnerBtn" data-owner-id="@item.OwnerCode">
                                        <span class="fas fa-pencil-alt"></span> Edit
                                    </a>
                                </div>
                             </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </form>
</div>




@if (TempData["SuccessNotification"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            Swal.fire({
                title: 'Success',
                text: '@TempData["SuccessNotification"]',
                icon: 'success',
                timer: 3000, // Automatically close the notification after 3 seconds
                showConfirmButton: false
            });
        });
    </script>
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/dataTables/datatables.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Select/Deselect All Checkboxes Logic
        const selectAllCheckbox = document.getElementById("select-all-checkbox");
        const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selectedIds"]');
        selectAllCheckbox.addEventListener("change", function () {
            checkboxes.forEach(cb => cb.checked = selectAllCheckbox.checked);
            toggleDeleteButton();
        });

        checkboxes.forEach(cb => {
            cb.addEventListener("change", toggleDeleteButton);
        });

        // Enable/Disable Delete Button Based on Selection
        function toggleDeleteButton() {
            const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
            const deleteButton = document.querySelector('.multi-delete-button');
            if (anyChecked) {
                deleteButton.classList.remove('disabled');
            } else {
                deleteButton.classList.add('disabled');
            }
        }


        // Initialize DataTables
        $('#ownersTable').DataTable({
            paging: true,
            lengthChange: true,
            searching: true,
            ordering: true,
            info: true,
            autoWidth: false,
            responsive: true,
            columnDefs: [{ targets: [0, 0], orderable: false }],
            language: {
                paginate: {
                    previous: "Previous", 
                    next: "Next" 
                }
            }
        });


        let isEditMode = false;

        // Show form when the "Create" button is clicked
        $('#CreateButton').click(function () {
            resetForm();
            $('#ownerForm').removeClass('d-none');
            $('#CreateButton').addClass('d-none');
            $('#saveButton').text('Create');
            isEditMode = false;
        });

        // Cancel button logic
        $('#cancelButton').click(function () {
            resetForm();
            $('#ownerForm').addClass('d-none');
            $('#CreateButton').removeClass('d-none');
            isEditMode = false;
        });

        // Edit button logic
        $('.editOwnerBtn').click(function () {
            var ownerId = $(this).data('owner-id');

            $.ajax({
                url: '/Owners/EditOwner',
                type: 'GET',
                data: { id: ownerId },
                success: function (response) {
                    if (response.success) {
                        populateForm(response.data);
                        $('#saveButton').text('Update');
                        $('#ownerForm').removeClass('d-none');
                        $('#CreateButton').addClass('d-none');
                        isEditMode = true;
                    } else {
                        showAlert('alert-danger', response.message);
                    }
                },
                error: function () {
                    showAlert('alert-danger', 'Error occurred while loading owner details.');
                }
            });
        });

        // Save button logic
        $('#saveButton').click(function (e) {
            e.preventDefault();

            var actionUrl = isEditMode ? '/Owners/UpdateOwner' : '/Owners/CreateOwner';

            $.ajax({
                url: actionUrl,
                type: 'POST',
                data: $('#ownerForm').serialize(),
                success: function (response) {
                    if (response.success) {
                        resetForm();
                        $('#ownerForm').addClass('d-none');
                        $('#CreateButton').removeClass('d-none');

                        window.location.reload();
                    } else {
                        showAlert('alert-danger', response.message);
                    }
                },
                error: function () {
                    showAlert('alert-danger', 'Error occurred while saving the owner.');
                }
            });
        });

        // Helper functions
        function resetForm() {
            $('#ownerForm')[0].reset();
            $('#ownerForm').find('input[type="hidden"]').val('');
            $('#alertMessage').remove();
        }

        function populateForm(data) {
            $('#ownerForm input[name="Owner.OwnerCode"]').val(data.ownerCode);
            $('#ownerForm input[name="Owner.OwnerFullName"]').val(data.ownerFullName);
            $('#ownerForm select[name="Owner.OwnerDept"]').val(data.ownerDept);
            $('#ownerForm select[name="Owner.OwnerLocation"]').val(data.ownerLocation);
            $('#ownerForm select[name="Owner.OwnerOffice"]').val(data.ownerOffice);
        }

        function showAlert(alertClass, message) {
            $('#alertMessage').remove();

            const alertHtml = `
                <div id="alertMessage" class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;
            $('.form-cont-owner').prepend(alertHtml);
        }
    });
</script>

