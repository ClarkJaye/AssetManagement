@model IEnumerable<AssetManagement.Models.DesktopInventory>

@{
    ViewData["Title"] = "Index";
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Chivo:wght@300;400;500;700&display=swap" />

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18"></script>


<style>

    *,
    *::before,
    *::after {
        box-sizing: border-box;
        -webkit-box-sizing: border-box;
    }


    body {
        font-family: 'Chivo', sans-serif;
        margin: 0;
        padding: 10px;
        overflow: hidden;
    }

    /* Add this CSS to adjust the top margin of the layout container */
    .container {
        margin-top: 70px; /* Adjust this value according to your navbar height */
    }

</style>
@{
    var alertMessage = TempData["AlertMessage"] as string;
    if (!string.IsNullOrEmpty(alertMessage))
    {
        <div id="alert" class="alert alert-danger alert-dismissible fade show" role="alert" style="background-color: #BF1E25; color: white;">
            @alertMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}
<script>
    $(document).ready(function () {
        // Close the alert after 6 seconds
        setTimeout(function () {
            $("#alert").alert("close");
        }, 5000);
    });
</script>

<h4>Deleted Items</h4>

<p> 
    <a class="btn btn-sm bg-secondary h5 text-white text-decoration-none p-2 btn createbtn" asp-action="Index">Back</a>
</p>
<input type="text" id="filterInput" placeholder="Search...">
<form method="post" action="@Url.Action("Retrieve", "DesktopInventories")">
    <!-- Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Retrieve</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to retrieve the selected item(s)?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                    <button type="submit" class="btn btn-danger">Yes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="table-container">
        <table class="table custom-fontsize p-4">
            <thead>
                <tr>
                    <th>
                        CODE
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Quantity)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.AllocatedNo)
                    </th>
                    <th>
                        AVAILABLE
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Level)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Brand)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Model)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MainBoard)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CPU)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GraphicsCard)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.HardDisk)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Memory)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OS)
                    </th>
                    <th hidden>
                        @Html.DisplayNameFor(model => model.Status)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Createdby)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DateCreated)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Updatedby)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DateUpdated)
                    </th>
                    <th>
                        <input type="checkbox" id="select-all-checkbox" class="green-checkbox" />
                    </th>
                    <th>
                        <button type="button" class="btn btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal">
                            <span id="boot-icon" class="bi bi-trash-fill"></span>
                        </button>

                    </th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.desktopInvCode)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Quantity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.AllocatedNo)
                        </td>
                        <td class="available-column">
                            Available
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Level.LevelDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Brand.BrandDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Model.ModelDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MainBoard.BoardDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CPU.CPUDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.GraphicsCard.GraphicsDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.HardDisk.HDDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Memory.MemoryDescription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OS.OSDescription)
                        </td>
                        <td hidden>
                            @Html.DisplayFor(modelItem => item.Status.status_name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Createdby.UserCode)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DateCreated)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Updatedby.UserCode)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DateUpdated)
                        </td>
                        <td>
                            <input type="checkbox" name="selectedIds" id="select-all-checkbox" class="green-checkbox" value="@item.desktopInvCode" />
                        </td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</form>

@if (TempData["SuccessNotification"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            Swal.fire({
                title: 'Success',
                text: '@TempData["SuccessNotification"]',
                icon: 'success',
                timer: 3000, // Automatically close the notification after 3 seconds
                showConfirmButton: false
            });
        });
    </script>
}

@if (TempData["ErrorNotification"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            Swal.fire({
                title: 'Error',
                text: '@TempData["ErrorNotification"]',
                icon: 'error',
                timer: 3000, // Automatically close the notification after 3 seconds
                showConfirmButton: false
            });
        });
    </script>
}


<script>

    const selectAllCheckbox = document.getElementById("select-all-checkbox");

    const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selectedIds"]');



    selectAllCheckbox.addEventListener("change", function () {

        for (let i = 0; i < checkboxes.length; i++) {

            checkboxes[i].checked = selectAllCheckbox.checked;

        }

    });
    //FILTERING

    $(document).ready(function () {
        $('#filterInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();
            $('tbody tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });



        // Loop through each row in the table body
        $("tbody tr").each(function () {
            // Find the relevant columns for Quantity and AllocatedNo
            var quantity = parseInt($(this).find("td:nth-child(3)").text());
            var allocated = parseInt($(this).find("td:nth-child(4)").text());

            // Calculate the available quantity
            var available = quantity - allocated;

            // Update the "Available" column with the calculated value
            $(this).find(".available-column").text(available);
        });
    });
</script>