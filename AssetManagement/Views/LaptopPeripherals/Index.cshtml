@model IEnumerable<AssetManagement.Models.LaptopPeripheral>

@{
    ViewData["Title"] = "Index";
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Chivo:wght@300;400;500;700&display=swap" />

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18"></script>

<style>

    *,
    *::before,
    *::after {
        box-sizing: border-box;
        -webkit-box-sizing: border-box;
    }


    body {
        font-family: 'Chivo', sans-serif;
        margin: 0;
        padding: 10px;
        overflow: hidden;
    }

    /* Add this CSS to adjust the top margin of the layout container */
    .container {
        margin-top: 70px; /* Adjust this value according to your navbar height */
    }

    .report-view {
        text-align: right;
    }

    .report-item {
        margin-bottom: 10px;
    }

    .report-label {
        font-weight: bold;
        margin-right: 10px;
        color: #333;
    }

    .report-value {
        font-size: 18px;
        font-weight: bold;
        background-color: #f2f2f2;
        padding: 5px 10px;
        border-radius: 5px;
        color: green;
    }


</style>
@if (TempData["Welcome"] != null)
{
    <div class="toast-notification animated-toast">
        <p>@TempData["Welcome"]</p>
    </div>
}
<h2>Laptop Peripheral</h2>
@{
    var alertMessage = TempData["AlertMessage"] as string;
}
@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="alert alert-danger" style="background-color: #BF1E25; color:white;">
        @alertMessage
    </div>
}
<div class="report-view">
    <div class="report-item">
        <span class="report-label">Total Available Peripherals:</span>
        <span class="report-value">@ViewBag.TotalAvailableLaptops</span>
    </div>
</div>

<div class="report-view">
    <div class="report-item">
        <span class="report-label">Total Allocated Peripherals:</span>
        <span class="report-value">@ViewBag.TotalAllocatedLaptops</span>
    </div>
</div>



<p style="margin-top:-36px;">
    <a id="createbtn" class="bg-success h5 text-white text-decoration-none p-2 btn createbtn" asp-action="Create">Create New</a>
    <a hidden id="createbtn" class="bg-success h5 text-white text-decoration-none p-2 btn createbtn" asp-action="Create" asp-controller="LaptopPeripheralAllocations">1st Owner</a>
    <a class="btn btn-sm bg-secondary h5 text-white text-decoration-none p-2 btn createbtn" asp-action="Inactive">Show Deleted</a>
</p>

<input type="text" id="filterInput" placeholder="Search...">

<form method="post" action="@Url.Action("DeleteAsEdit", "LaptopPeripherals")">
    <!-- Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete the selected item(s)?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>

<div class="table-container">
    <table class="table custom-fontsize p-4">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.PeripheralCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PeripheralDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PeripheralQty)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PeripheralAllocation)
            </th>
                    <th>AVAILABLE</th>
            <th>
                @Html.DisplayNameFor(model => model.PeripheralCreatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PeripheralUpdatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Brand)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DeviceType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Vendor)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedBy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedBy)
            </th>
            <th>
                        <button type="button" class="btn btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal">
                            <span id="boot-icon" class="bi bi-trash-fill"></span>
                        </button>

            </th>
                    <th>
                        <input type="checkbox" id="select-all-checkbox" class="green-checkbox" />

                    </th>
                    <th>

                    </th>

        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.PeripheralCode)
                </td>
            <td>
                @Html.DisplayFor(modelItem => item.PeripheralDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PeripheralQty)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PeripheralAllocation)
            </td>
            <td class="available-column">
                Available
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PeripheralCreatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PeripheralUpdatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Brand.BrandDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DeviceType.DevtypeDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Vendor.VendorName)
            </td>
            <td hidden>
                @Html.DisplayFor(modelItem => item.Status.status_code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedBy.UserFullName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedBy.UserFullName)
                    </td>
                        <td>
                            <input type="checkbox" name="selectedIds" id="select-all-checkbox" class="green-checkbox" value="@item.PeripheralCode" />
                        </td>
                    <td>
                        <a class="btn btn-sm bg-success text-white custom-fontsize editbtn" asp-action="Edit" asp-route-id="@item.PeripheralCode">Edit</a>
                    </td>
                    <td>
                        <a class="btn btn-sm bg-secondary  text-white custom-fontsize editbtn" asp-action="InventoryDetails" asp-controller="LaptopPeripherals" asp-route-id="@item.PeripheralCode" asp-route-ids="@item.PeripheralDescription">Details</a>

                    </td>
        </tr>
}
    </tbody>
</table>
</div>
</form>
    @if (TempData["SuccessNotification"] != null)
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                Swal.fire({
                    title: 'Success',
                    text: '@TempData["SuccessNotification"]',
                    icon: 'success',
                    timer: 3000, // Automatically close the notification after 3 seconds
                    showConfirmButton: false
                });
            });
        </script>
    }



    <script>
    const selectAllCheckbox = document.getElementById("select-all-checkbox");
    const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selectedIds"]');

    selectAllCheckbox.addEventListener("change", function () {
        for (let i = 0; i < checkboxes.length; i++) {
            checkboxes[i].checked = selectAllCheckbox.checked;
        }
    });
        //FILTERING


    $(document).ready(function () {
        $('#filterInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();
            $('tbody tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });


        // Loop through each row in the table body
        $("tbody tr").each(function () {
            // Find the relevant columns for PeripheralQty and PeripheralAllocation
            var quantity = parseInt($(this).find("td:nth-child(3)").text());
            var allocated = parseInt($(this).find("td:nth-child(4)").text());

            // Calculate the available quantity
            var available = quantity - allocated;

            // Update the "Available" column with the calculated value
            $(this).find(".available-column").text(available);
        });

    });
    </script>
